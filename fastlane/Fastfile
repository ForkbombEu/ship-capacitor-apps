# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

KEYSTORE_PATH = ENV["KEYSTORE_PATH"]
KEYSTORE_KEY_ALIAS = ENV["KEYSTORE_KEY_ALIAS"]
KEYSTORE_KEY_PASSWORD = ENV["KEYSTORE_KEY_PASSWORD"]
KEYSTORE_STORE_PASSWORD = ENV["KEYSTORE_STORE_PASSWORD"]
FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
SERVICE_ACCOUNT_PATH = ENV["SERVICE_ACCOUNT_PATH"]
APK_OUTPUT_PATH = "./release.apk"
CACHE_PATH = "./.cache"
PULL_REQUEST_NUMBER = ENV["PULL_REQUEST_NUMBER"]
PULL_REQUEST_TITLE = ENV["PULL_REQUEST_TITLE"]
PUBLIC_BACKEND_URL = ENV["PUBLIC_BACKEND_URL"]
INITIAL_BUILD_NUMBER = ENV["INITIAL_BUILD_NUMBER"]
DEMO_USER = ENV["DEMO_USER"]
DEMO_PASSWORD = ENV["DEMO_PASSWORD"]
CONTACT_EMAIL = ENV["CONTACT_EMAIL"]
CONTACT_FIRST_NAME = ENV["CONTACT_FIRST_NAME"]
CONTACT_LAST_NAME = ENV["CONTACT_LAST_NAME"]
CONTACT_PHONE = ENV["CONTACT_PHONE"]
PACKAGE_NAME = ENV["PACKAGE_NAME"]

def generate_release_notes(previous_version) 
  changelog = File.read(File.expand_path('../CHANGELOG.md', __dir__))
  sections = []
  current_section = []
  changelog.each_line do |line|
    if line.start_with?('# [')
      sections << current_section.join unless current_section.empty?
      current_section = [line]
    else
      current_section << line unless current_section.empty?
    end
  end
  sections << current_section.join unless current_section.empty?

  changes = []

  sections.each do |section|
    version_match = section.match(/^# \[(\d+\.\d+\.\d+)\]/)
    next unless version_match

    current_version = version_match[1]

    current_parts = current_version.split('.').map(&:to_i)
    prev_parts = previous_version.split('.').map(&:to_i)

    is_newer = false
    current_parts.each_with_index do |part, index|
      prev_part = prev_parts[index] || 0
      if part > prev_part
        is_newer = true
        break
      elsif part < prev_part
        is_newer = false
        break
      end
    end

    unless is_newer
      break
    end

    section.each_line do |line|
      next unless line.start_with?('* ')
      clean_line = line.gsub(/ \(\[[^\]]+\]\([^)]+\)\)/, '').strip
      changes << "- #{clean_line}"
    end
  end

  changes.join("\n")
end

platform :android do
  private_lane :build_and_sync do
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ANDROID=true ionic cap build android --no-open"
  end

  private_lane :sign_and_build_bundle do
    gradle(
      task: "clean bundleRelease",
      project_dir: 'android/',
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
        "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
        "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
        "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
      })
    
    aab_path = "android/app/build/outputs/bundle/release/app-release.aab"
    bundletool(
      ks_path: KEYSTORE_PATH,
      ks_password: KEYSTORE_STORE_PASSWORD,
      ks_key_alias: KEYSTORE_KEY_ALIAS,
      ks_key_alias_password: KEYSTORE_KEY_PASSWORD,
      bundletool_version: '1.16.0',
      aab_path: aab_path,
      apk_output_path: APK_OUTPUT_PATH,
      verbose: true,
      cache_path: CACHE_PATH
    )
  end

  def get_new_version_code
    productionVersionCodes = google_play_track_version_codes(
      track: 'production',
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:PACKAGE_NAME
    )
    betaVersionCodes = google_play_track_version_codes(
      track: 'beta',
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:PACKAGE_NAME
    )
    alphaVersionCodes = google_play_track_version_codes(
      track: 'alpha',
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:PACKAGE_NAME
    )
    internalVersionCodes = google_play_track_version_codes(
      track: 'internal',
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:PACKAGE_NAME
    )

    versionCodes = [
      productionVersionCodes, 
      betaVersionCodes, 
      alphaVersionCodes, 
      internalVersionCodes
    ].reduce([], :concat)

    return versionCodes.max + 1
  end

  private_lane :update_version do |options|
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: options[:version_code]
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: options[:version_name]
    )
  end 

  private_lane :deliver_to_play_store do |options|
    upload_to_play_store(
      json_key:"#{SERVICE_ACCOUNT_PATH}",
      package_name:PACKAGE_NAME,
      aab:"android/app/build/outputs/bundle/release/app-release.aab",
      track: options[:track],
      metadata_path: "./fastlane/metadata/android",
      skip_upload_apk: true,
    )
  end

  desc "Deploy GitHub version"
  lane :github do
    build_and_sync
    package = load_json(json_path: "./package.json")
    update_version(version_code: package['version'].gsub('.', '').to_i, version_name: package['version'])
    sign_and_build_bundle
  end

  lane :distribute do
    build_and_sync
    package = load_json(json_path: "./package.json")
    # increment_version_code(
    #   gradle_file_path: "./android/app/build.gradle",
    #   version_code: PULL_REQUEST_NUMBER
    # )
    # increment_version_name(
    #   gradle_file_path: "./android/app/build.gradle",
    #   version_name: package['version'] + "-" + PULL_REQUEST_NUMBER
    # )
    update_version(version_code: PULL_REQUEST_NUMBER, version_name: package['version'] + "-" + PULL_REQUEST_NUMBER)
    sign_and_build_bundle
    release = firebase_app_distribution(
      app: FIREBASE_APP_ID,
      service_credentials_file: SERVICE_ACCOUNT_PATH,
      android_artifact_path: APK_OUTPUT_PATH,
      groups: 'dyne',
      release_notes: "#{PULL_REQUEST_TITLE}"
    )
  end

  lane :alpha do
    build_and_sync
    package = load_json(json_path: "./package.json")
    version_code = get_new_version_code
    # increment_version_code(
    #   gradle_file_path: "./android/app/build.gradle",
    #   version_code: internal_latest_version_code.max + 1
    # )
    # increment_version_name(
    #   gradle_file_path: "./android/app/build.gradle",
    #   version_name: package['version'] + "-alpha"
    # )
    update_version(version_code: version_code, version_name: package['version'] + "-alpha")
    sign_and_build_bundle
    release = deliver_to_play_store(track: 'alpha')
  end

  lane :beta do
    build_and_sync
    package = load_json(json_path: "./package.json")
    version_code = get_new_version_code
    update_version(version_code: version_code, version_name: package['version'] + "-beta")
    sign_and_build_bundle
    release = deliver_to_play_store(track: 'beta')
  end

  lane :production do
    build_and_sync
    package = load_json(json_path: "./package.json")
    version_code = get_new_version_code
    update_version(version_code: version_code, version_name: package['version'])
    sign_and_build_bundle
    release = deliver_to_play_store(track: 'production')
  end

end




platform :ios do
  desc 'Export ipa and submit to TestFlight'
  lane :production do
    keychain_info = { keychain_name: "ios-build-#{Time.now.to_i}.keychain", keychain_password: SecureRandom.uuid }

    begin
      setup_signing(keychain_info)
      build_num, new_version, latest_version = bump_build_number_and_version
      release_notes = generate_release_notes(latest_version)
      build_app_with_signing(keychain_info)
      deliver_production(build_number: build_num, new_version: new_version, release_notes: release_notes)
    ensure
      cleanup_keychain(keychain_info)
    end
  end
  lane :testflight do
    keychain_info = { keychain_name: "ios-build-#{Time.now.to_i}.keychain", keychain_password: SecureRandom.uuid }

    begin
      setup_signing(keychain_info)
      build_num, new_version, latest_version = bump_build_number_and_version
      release_notes = generate_release_notes(latest_version)
      build_app_with_signing(keychain_info)
      submit_to_testflight(release_notes: release_notes)
    ensure
      cleanup_keychain(keychain_info)
    end
  end

  private_lane :setup_signing do |options|
    create_keychain(
      name: options[:keychain_name],
      password: options[:keychain_password],
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
    import_cert(options)
    install_profile
    update_project_settings
  end

  private_lane :version_already_in_production? do |options|
    version = options[:version]
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
      duration: 1200,
      in_house: false
    )
    
    begin
      app_info = Spaceship::ConnectAPI::App.find(ENV['BUNDLE_IDENTIFIER'])
      live_version = app_info.get_live_app_store_version
      
      if live_version && live_version.version_string == version
        return true
      end
      return false
    rescue => e
      UI.error("Error checking app version status: #{e}")
      return false
    end
  end

lane :bump_build_number_and_version do
  api_key = app_store_connect_api_key(
    key_id: ENV['APPLE_KEY_ID'],
    issuer_id: ENV['APPLE_ISSUER_ID'],
    key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
    duration: 1200,
    in_house: false
  )
  build_num = app_store_build_number(
    api_key: api_key,
    app_identifier: ENV['BUNDLE_IDENTIFIER'],
    live: false,
    initial_build_number: INITIAL_BUILD_NUMBER
  )
  build_num += 1
  latest_version = lane_context[SharedValues::LATEST_VERSION]
  UI.message("Bumped build number to #{build_num}")
  increment_build_number(
    build_number: build_num,
    xcodeproj: "./ios/App/App.xcodeproj",
    skip_info_plist: true
  )
  package = load_json(json_path: "./package.json")
  new_version = package["version"]
  if version_already_in_production?(version: new_version)
    version_parts = new_version.split('.').map(&:to_i)
    version_parts[-1] += 1
    new_version = version_parts.join('.')
    UI.message("Version #{package['version']} already in production, bumping to #{new_version}")
  else
    UI.message("Updating app version to #{new_version}")
  end
  info_plist_path = "./ios/App/App/Info.plist"
  set_info_plist_value(
    path: info_plist_path,
    key: "CFBundleShortVersionString",
    value: new_version
  )
  
  [build_num, new_version, latest_version]
end


  private_lane :import_cert do |options|
    cert_path = "#{Dir.tmpdir}/build_certificate.p12"
    File.write(cert_path, Base64.decode64(ENV['BUILD_CERTIFICATE_BASE64']))
    import_certificate(
      certificate_path: cert_path,
      certificate_password: ENV['P12_PASSWORD'] || "",
      keychain_name: options[:keychain_name],
      keychain_password: options[:keychain_password],
      log_output: true
    )
    File.delete(cert_path)
  end

  private_lane :cleanup_keychain do |options|
    delete_keychain(
      name: options[:keychain_name]
    )
  end

  private_lane :install_profile do
    profile_path = "#{Dir.tmpdir}/build_pp.mobileprovision"
    File.write(profile_path, Base64.decode64(ENV['BUILD_PROVISION_PROFILE_BASE64']))
    UI.user_error!("Failed to create provisioning profile at #{profile_path}") unless File.exist?(profile_path)
    ENV['PROVISIONING_PROFILE_PATH'] = profile_path
    install_provisioning_profile(path: profile_path)
    File.delete(profile_path)
  end

  private_lane :update_project_settings do
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./ios/App/App.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      profile_name: ENV['APPLE_PROFILE_NAME'],
      bundle_identifier: ENV['BUNDLE_IDENTIFIER'],
      team_id: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
    update_project_team(
      path: "./ios/App/App.xcodeproj",
      teamid: ENV['APP_STORE_CONNECT_TEAM_ID']
    )
  end

  private_lane :build_app_with_signing do |options|
    unlock_keychain(
      path: options[:keychain_name],
      password: options[:keychain_password],
      set_default: false
    )
    build_app(
      workspace: "./ios/App/App.xcworkspace",
      scheme: "App",
      configuration: "Release",
      export_method: "app-store",
      output_name: "App.ipa",
      export_options: {
        provisioningProfiles: {
          ENV['BUNDLE_IDENTIFIER'] => ENV['APPLE_PROFILE_NAME']
        }
      },
      xcargs: "-verbose",
      buildlog_path: "./build_logs",
      export_xcargs: "-allowProvisioningUpdates"
      # sdk: "iOS 18"
    )
  end

  private_lane :submit_to_testflight do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
      beta_app_review_info: {
      contact_email: CONTACT_EMAIL,
      contact_first_name: CONTACT_FIRST_NAME,
      contact_last_name: CONTACT_LAST_NAME,
      contact_phone: CONTACT_PHONE,
      demo_account_name: DEMO_USER,
      demo_account_password: DEMO_PASSWORD
    },
      api_key: api_key,
      ipa: "./App.ipa",
      skip_waiting_for_build_processing: true,
      demo_account_required: true,
      distribute_external:true,
      changelog: options[:release_notes]
    )
  end
  private_lane :deliver_production do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_ISSUER_ID'],
      key_content: Base64.decode64(ENV['APPLE_KEY_CONTENT']),
      duration: 1200,
      in_house: false
    )
    pilot(
      api_key: api_key,
      ipa: "./App.ipa",
      skip_waiting_for_build_processing: true,
      demo_account_required: true,
      distribute_external:true,
      changelog: options[:release_notes],
      app_version: options["new_version"]
    )
    deliver(
      build_number: options[:build_num],
      app_version: options["new_version"],
      app_review_attachment_file: './fastlane/metadata/iphone-login.mp4',
      submit_for_review:true,
      api_key: api_key,
      force: true, 
      skip_binary_upload: true,
      metadata_path: "./fastlane/metadata/ios",
      precheck_include_in_app_purchases: false,
      skip_screenshots: true,
      app_review_information: ({
        demo_user: DEMO_USER,
        demo_password: DEMO_PASSWORD
      })
    )
  end
end
